@using Temple.Net.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Temple.Net.Service
@inject AppDbContext context
@inject ValidationService ValidationService
@inject ISnackbar Snackbar

<style>
    body {
        overflow-x: scroll;
    }
</style>

<style>
    .selected {
        background-color: #1E88E5 !important;
    }
    .selected > td {
        color: white !important;
    }
    .selected > td .mud-input {
        color: white !important;
    }
</style>

<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.ExtraLarge"
                   CloseButton="true"
                   BackdropClick="false"
                   NoHeader="false"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="true"/>

<MudTable T="Parsonalion" Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped"
          Filter="new Func<Parsonalion,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem" EditTrigger="@editTrigger" 
          OnRowClick="@RowClickEvent" @ref="mudTable" RowClass="cursor-pointer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Прихожане</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Найти" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Name)">Имя</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.LastName)">Фамилия</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Otch)">Отчество</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.MonaxName)">Монашеское имя</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Born)">Год рождения</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Death)">Год смерти</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Nation)">Национость</MudTableSortLabel></MudTh>
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Education.YearAdmission)">Год приступление</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Education.YearOfRease)">Год выпуска</MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.LVLEducation)">Уровень образования</MudTableSortLabel></MudTh>
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Award.Name)">Название награды</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Award.YearAward)">Год получения награды</MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Source)">Источник</MudTableSortLabel></MudTh>
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.State.Verdict)">Приговор</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.State.YearArrest)">Год ареста</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.State.YearRehabilitation)">Год реабилитации</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.State.YearSentence)">Год приговора</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Sun.SunName)">Имя сана</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Sun.YearDefrock)">Год снятия сана</MudTableSortLabel></MudTh> *@
        @* <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Sun.YearOrdinations)">Год рукоположения</MudTableSortLabel></MudTh> *@
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.SocialOrigin)">Социальное положение</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.PlaceBirths)">Место рождения</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.PlaceOfDeath)">Место смерти</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Parsonalion, object>(x=>x.Note)">Примечания</MudTableSortLabel></MudTh>
    </HeaderContent>
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Otch">@context.Otch</MudTd>
        <MudTd DataLabel="MonaxName">@context.MonaxName</MudTd>
        <MudTd DataLabel="Born">@context.Born</MudTd>
        <MudTd DataLabel="Death">@context.Death</MudTd>
        <MudTd DataLabel="Nation">@context.Nation</MudTd>
        @* <MudTd DataLabel="Education.YearAdmission">@context.Education.YearAdmission</MudTd> *@
        @* <MudTd DataLabel="Education.YearOfRease">@context.Education.YearOfRease</MudTd> *@
        @* <MudTd DataLabel="LVLEducation">@context.LVLEducation</MudTd> *@
        @* <MudTd DataLabel="Award.Name">@context.Award.Name</MudTd> *@
        @* <MudTd DataLabel="Award.YearAward">@context.Award.YearAward</MudTd> *@
        <MudTd DataLabel="Source">@context.Source</MudTd>
        @* <MudTd DataLabel="State.Verdict">@context.State.Verdict</MudTd> *@
        @* <MudTd DataLabel="State.YearArrest">@context.State.YearArrest</MudTd> *@
        @* <MudTd DataLabel="State.YearRehabilitation">@context.State.YearRehabilitation</MudTd> *@
        @* <MudTd DataLabel="State.YearSentence">@context.State.YearSentence</MudTd> *@
        @* <MudTd DataLabel="Sun.SunName">@context.Sun.SunName</MudTd> *@
        @* <MudTd DataLabel="Sun.YearDefrock">@context.Sun.YearDefrock</MudTd> *@
        @* <MudTd DataLabel="Sun.YearOrdinations">@context.Sun.YearOrdinations</MudTd> *@
        <MudTd DataLabel="SocialOrigin">@context.SocialOrigin</MudTd>
        <MudTd DataLabel="PlaceBirths">@context.PlaceBirths</MudTd>
        <MudTd DataLabel="PlaceOfDeath">@context.PlaceOfDeath</MudTd>
        <MudTd DataLabel="Note">@context.Note</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<MudDialog @bind-Visible="visibleModal" @onchange="HandleDialogChange">
    <DialogContent>
        <div>
            <MudContainer MaxWidth="MaxWidth.Large" Style="width: 45%; margin-bottom: 20px;">
                <MudCard>
                    <MudCardContent>
                        <h5 class="card-title text-center mb-3 fw-light fs-5">Добавить персоналии</h5>

                        <MudTextField T="string?" @bind-Value="findPers.LastName" Label="Фамилия"/>

                        <MudTextField T="string?" @bind-Value="findPers.Name" Label="Имя"/>

                        <MudTextField T="string?" @bind-Value="findPers.Otch" Label="Отчество"/>

                        <MudTextField T="string?" @bind-Value="findPers.MonaxName" Label="Монашеское имя"/>

                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                <MudTextField Label="Год рождения" @bind-Value="born" Validation="ValidationService.Validation" Style="width: 100%"/>
                            </MudTooltip>
                        </div>

                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                            <MudTextField T="string?" @bind-Value="findPers.PlaceBirths" Label="Место рождение"/>
                        </div>

                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                <MudTextField Label="Год смерти" @bind-Value="death" Validation="ValidationService.Validation" Style="width: 100%"/>
                            </MudTooltip>
                        </div>

                        <MudTextField T="string?" @bind-Value="findPers.PlaceOfDeath" Label="Место смерти"/>


                        <MudAutocomplete T="string" Label="Национальность" @bind-Value="selectedNation" SearchFunc="@SearchNation"
                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                         CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />

                        <MudAutocomplete T="string" Label="Социальное положение" @bind-Value="selectedSocial" SearchFunc="@SearchSocial"
                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                         CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />

                        <br/>

                        <div>
                            <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
                                <h6 class="text-center mb-3 fw-light fs-5">Образование</h6>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="OnShowModalEducationModalClick"/>
                            </div>

                            <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
                                @foreach (var item in findPers?.State)
                                {
                                <MudListItem Text="@item.Verdict.ToString()"/>
                                }
                            </MudList>
                        </div>

                        <MudDialog @bind-visible="visibleModalEductation" Options="@(new DialogOptions() { FullWidth = false, NoHeader = true })">
                            <DialogContent>
                                <div>
                                    <h6 class="text-center mb-3 fw-light fs-5">Образование</h6>
                                    <div>
                                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                <MudTextField Label="Год поступления" @bind-Value="born" Validation="ValidationService.Validation" Style="width: 100%"/>
                                            </MudTooltip>
                                        </div>

                                        <MudTextField @bind-Value="insition" Label="Учреждение образования"/>

                                        <div>
                                            <MudSelect T="string" @bind-Value="@selectedLVLEductaion" Label="Уровень образования">
                                                <MudSelectItem Value="@("Высшее")"/>
                                                <MudSelectItem Value="@("Среднее")"/>
                                                <MudSelectItem Value="@("Неполное-среднее")"/>
                                                <MudSelectItem Value="@("Начальное")"/>
                                                <MudSelectItem Value="@("Не известно")"/>
                                            </MudSelect>
                                        </div>

                                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                            <MudTooltip Text="Пишите дату в формате ГГГГ">
                                                <MudTextField Label="Год выпуска" @bind-Value="yearOfRease" Validation="ValidationService.ValidationOnlyYear" Style="width: 100%"/>
                                            </MudTooltip>
                                        </div>
                                    </div>
                                </div>
                            </DialogContent>
                            <DialogActions>
                                <MudButton Color="Color.Primary" OnClick="OnHideModalEducationModalClick">Отмена</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeEducationTempleClick">Добавить</MudButton>
                            </DialogActions>
                        </MudDialog>

                        <div>
                            <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
                                <h6 class="text-center mb-3 fw-light fs-5">Меры государственного воздействия</h6>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="@(() => visibleModalState = true)"/>
                            </div>

                            <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
                                @foreach (var item in findPers?.State)
                                {
                                <MudListItem Text="@item.Verdict.ToString()"/>
                                }
                            </MudList>
                        </div>

                        <div>
                            <MudDialog @bind-visible="visibleModalState" Options="@(new DialogOptions() { FullWidth = false, NoHeader = true })">
                                <DialogContent>
                                    @* <h3 class="card-title text-center mb-3 fw-light fs-5">Меры государственного воздействия</h3> *@
                                    <div>
                                        <h4 class="card-title text-center mb-3 fw-light fs-5">Приговор</h4>

                                        <div>
                                            <MudAutocomplete T="string" Label="Приговор" @bind-Value="selectedVerdict" SearchFunc="@SearchVerdicts"
                                                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                             CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
                                        </div>

                                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                <MudTextField Label="Год ареста" @bind-Value="yearArrest" Validation="ValidationService.Validation" Style="width: 100%"/>
                                            </MudTooltip>
                                        </div>

                                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                <MudTextField Label="Год приговора" @bind-Value="yearSentence" Validation="ValidationService.Validation" Style="width: 100%"/>
                                            </MudTooltip>
                                        </div>

                                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                <MudTextField Label="Год реабелитации" @bind-Value="yearRehabilitation" Validation="ValidationService.Validation" Style="width: 100%"/>
                                            </MudTooltip>
                                        </div>

                                        <MudTextField @bind-Value="rehab" Label="Реабилитирующий орган"/>
                                    </div>
                                </DialogContent>
                                <DialogActions>
                                    <MudButton Color="Color.Primary" OnClick="@(() => visibleModalState = false)">Отмена</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeStateTempleClick">Добавить</MudButton>
                                </DialogActions>
                            </MudDialog>
                        </div>

                        <div>
                            <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
                                <h6 class="text-center mb-3 fw-light fs-5">Церковная ориентация</h6>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="@(() => visibleModalOriention = true)"/>
                            </div>

                            <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
                                @foreach (var item in findPers?.Oriention)
                                {
                                    <MudListItem Text="@item.Oriention.ToString()"/>
                                }
                            </MudList>
                        </div>

                        <MudDialog @bind-visible="visibleModalOriention" Options="@(new DialogOptions() { FullWidth = false, NoHeader = true })">
                            <DialogContent>
                                <div>
                                    <h3 class="card-title text-center mb-3 fw-light fs-5">Церковная ориентация</h3>

                                    <div>
                                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                <MudTextField Label="Год отпадения" @bind-Value="yearFall" Validation="ValidationService.Validation" Style="width: 100%"/>
                                            </MudTooltip>
                                        </div>

                                        <MudTextField @bind-Value="oriention" Label="Церковная ориентация"/>

                                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                <MudTextField Label="Год возрата" @bind-Value="yearRefund" Validation="ValidationService.Validation" Style="width: 100%"/>
                                            </MudTooltip>
                                        </div>
                                    </div>
                                </div>
                            </DialogContent>
                            <DialogActions>
                                <MudButton Color="Color.Primary" OnClick="@(() => visibleModalOriention = false)">Отмена</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeOriention">Добавить</MudButton>
                            </DialogActions>
                        </MudDialog>

                        <div>
                            <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
                                <h6 class="text-center mb-3 fw-light fs-5">Сан</h6>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="@(() => visibleModalSun = true)"/>
                            </div>

                            <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
                                @foreach (var item in findPers?.Sun)
                                {
                                <MudListItem Text="@item.SunName.ToString()"/>
                                }
                            </MudList>

                            <MudDialog @bind-visible="visibleModalSun" Options="@(new DialogOptions() { FullWidth = false, NoHeader = true })">
                                <DialogContent>
                                    <div>
                                        <h3 class="card-title text-center mb-3 fw-light fs-5">Сан</h3>

                                        <div>
                                            <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                                <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                    <MudTextField Label="Год рукоположения" @bind-Value="yearOrdinations" Validation="ValidationService.Validation" Style="width: 100%"/>
                                                </MudTooltip>
                                            </div>

                                            <MudAutocomplete T="string" Label="Награда" @bind-Value="selectedSunName" SearchFunc="@SearchAward"
                                                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                             CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />

                                            <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                                <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                    <MudTextField Label="Год снятия сана" @bind-Value=yearDefrock Validation="ValidationService.Validation" Style="width: 100%"/>
                                                </MudTooltip>
                                            </div>
                                        </div>
                                    </div>
                                </DialogContent>
                                <DialogActions>
                                    <MudButton Color="Color.Primary" OnClick="@(() => visibleModalSun = false)">Отмена</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeSunClick">Добавить</MudButton>
                                </DialogActions>
                            </MudDialog>
                        </div>

                        <div>
                            <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
                                <h6 class="text-center mb-3 fw-light fs-5">Награды</h6>
                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="@(() => visibleModalAward = true)"/>
                            </div>

                            <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
                                @foreach (var item in findPers?.Award)
                                {
                                <MudListItem Text="@item.Name.ToString()"/>
                                }
                            </MudList>
                        </div>

                        <MudDialog @bind-visible="visibleModalAward" Options="@(new DialogOptions() { FullWidth = false, NoHeader = true })">
                            <DialogContent>
                                <div>
                                    <h3 class="card-title text-center mb-3 fw-light fs-5">Награды</h3>

                                    <div>
                                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                                            <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                                                <MudTextField Label="Год награждения" @bind-Value="yearAward" Validation="ValidationService.Validation" Style="width: 100%"/>
                                            </MudTooltip>
                                        </div>

                                        <MudAutocomplete T="string" Label="Награда" @bind-Value="selectedAward" SearchFunc="@SearchAward"
                                                         ResetValueOnEmptyText="@resetValueOnEmptyText"
                                                         CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
                                    </div>
                                </div>
                            </DialogContent>
                            <DialogActions>
                                <MudButton Color="Color.Primary" OnClick="@(() => visibleModalAward = false)">Отмена</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeAward">Добавить</MudButton>
                            </DialogActions>
                        </MudDialog>
                        
                        <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                            <MudTooltip Text="Пишите дату в формате ГГГГ">
                                <MudTextField Label="Год упоменания" @bind-Value="yearMention" Validation="ValidationService.ValidationOnlyYear" Style="width: 100%"/>
                            </MudTooltip>
                        </div>

                        <MudTextField @bind-Value="findPers.Note" Label="Примечания"/>

                        <MudTextField @bind-Value="findPers.Source" Label="Источник информации (в виде библиографической записи)"/>

                        <div class="input-file-row">
                            <label class="input-file">
                                <InputFile OnChange="LoadPhoto" accept="image/*"/>
                                <span>Выберите фотографию</span>
                            </label>
                            <div class="input-file-list"></div>
                        </div>

                        <div class="input-file-row" style="margin-top: 10px;">
                            <label class="input-file">
                                <InputFile OnChange="LoadFile"/>
                                <span>Выберите файл</span>
                            </label>
                            <div class="input-file-list"></div>
                        </div>

                        <div class="d-grid mb-2">
                            <MudButton Style="margin-top: 20px;" Color="Color.Primary" Variant="Variant.Filled" OnClick="Sumbit">Обновить</MudButton>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudContainer>

            <style>
                .containerOriention {
                    display: flex;
                    align-items: center; /* Выравнивание по вертикали */
                }
            </style>
            
            @code {
                public bool btnActive;

                private string selectedSunName;

                private string selectedAward;

                private string selectedNation;

                private string selectedSocial;

                private string selectedLVLEductaion;

                private string selectedVerdict;

                private bool visibleModalState = false;

                private bool visibleModalEductation = false;

                private bool visibleModalOriention = false;

                private bool visibleModalSun = false;

                private bool visibleModalAward = false;

                private string oriention;

                private string insition;

                private string rehab;

                private long maxFileSize = 1024 * 500;

                private async Task LoadPhoto(InputFileChangeEventArgs e)
                {
                    var trustedFileName = $"{Guid.NewGuid().ToString("N").Remove(6)}.png";

                    var path = $@"wwwroot/photos/{trustedFileName}";

                    await using FileStream fs = new(path, FileMode.Create);
                    await e.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

                    findPers.Photo = path;
                }

                private async Task LoadFile(InputFileChangeEventArgs e)
                {
                    var path = $@"wwwroot/files/{e.File.Name}";

                    await using FileStream fs = new(path, FileMode.Create);
                    await e.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

                    findPers.File = path;
                }

                #region

                private string[] awards =
                {
                    "Набедренник", "Камилавка фиолетового цвета", "Наперсный крест", "Палица", "Крест с украшениями",
                    "Служение Божественной литургии с отверстыми Царскими вратами до Херувимской песни",
                    "Служение Божественной литургии с отверстыми Царскими Вратами до 'Отче наш'", "Митра",
                    "Право ношения второго наперсного креста с украшениями", "Патриарший наперстый крест", "Двойной орарь",
                };

                private string[] sunNames =
                {
                    "Архидиакон", "Архиепископ", "Диакон", "Епископ", "Игумен", "Иеродиакон", "Иеромонах", "Митрополит",
                    "Монах", "Пономарь", "Послушник", "Причетник", "Протодиакон", "Протоиерей", "Протопресвитер", "Псаломщик",
                    "Священник"
                };

                private string[] verdicts =
                {
                    "10 лет тюремного заключения условно", "15 лет тюремного заключения с применением общественных работ",
                    "1 год исправительных трудовых работ", "1 год принудительных работ", "2 год принудительных работ",
                    "2 года строгой изоляции", "2 года тюрьмы с последующей ссылкой", "3 года строгой изоляции",
                    "3 месяца принудительных работ", "5 лет ИТЛ с высылкой семьи на Север", "5 лет строгой изоляции",
                    "5 лет строгой изоляции с конфискацией имущества и 3 года поражения в гражданских правах",
                    "6 месяцев исправительных работ", "6 месяцев принудительных работ", "3 месяца принудительных работ",
                    "8 лет принудительных работ со строгой изоляцией и конфискацией имущества", "Бессрочная административная высылка",
                    "Бессрочная ссылка", "Бессрочное заключение в концлагерь с применением принудительных работ",
                    "Бессрочное тюремное заключение с тягчайшими принудительными работами без права свидания с родными",
                    "Высшая мера наказания (расстрел)", "Высшая мера наказания (расстрел) с заменой на 10 лет заключения в ИТЛ",
                    "Высшая мера наказания (расстрел) с конфискацией имущества", "Высылка"
                };

                private string[] nations =
                {
                    "Белорус", "Русский", "Украинец"
                };

                private string[] socials =
                {
                    "Из крестьян", "Из мещан", "Из духовенства", "Из служащих", "Из дворян"
                };

                #endregion

                private bool coerceText;

                private bool coerceValue = true;

                private bool resetValueOnEmptyText;

                private async Task<IEnumerable<string>> SearchAward(string value, CancellationToken token)
                {
                    await Task.Delay(5, token);

                    if (string.IsNullOrEmpty(value))
                        return awards;
                    return awards.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                }

                private async Task<IEnumerable<string>> SearchSunName(string value, CancellationToken token)
                {
                    await Task.Delay(5, token);

                    if (string.IsNullOrEmpty(value))
                        return sunNames;
                    return sunNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                }

                private async Task<IEnumerable<string>> SearchVerdicts(string value, CancellationToken token)
                {
                    await Task.Delay(5, token);

                    if (string.IsNullOrEmpty(value))
                        return verdicts;
                    return verdicts.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                }

                private async Task<IEnumerable<string>> SearchSocial(string value, CancellationToken token)
                {
                    await Task.Delay(5, token);

                    if (string.IsNullOrEmpty(value))
                        return socials;
                    return socials.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                }

                private async Task<IEnumerable<string>> SearchNation(string value, CancellationToken token)
                {
                    await Task.Delay(5, token);

                    if (string.IsNullOrEmpty(value))
                        return nations;
                    return nations.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                }

                #region ValuesForDate

                private string born;

                private string death;

                private string yearAdmission;

                private string yearOfRease;

                private string yearArrest;

                private string yearSentence;

                private string yearRehabilitation;

                private string yearFall;

                private string yearRefund;

                private string yearOrdinations;

                private string yearDefrock;

                private string yearAward;

                private string yearMention;

                #endregion

                private async Task Sumbit()
                {
                    findPers.Born = born.SetDateTime();
                    findPers.Death = death.SetDateTime();
                    findPers.YearMention = yearMention.SetDateTime();

                    findPers.FillEmptyFields();

                    context.Parsonalions.Update(findPers);
                    context.SaveChanges();

                    visibleModal = false;
                }

                private DotNetObjectReference<AddPersonali>? dotNetHelper;

                private async Task HandleDialogChange(ChangeEventArgs e)
                {
                    if ((bool)e.Value && !visibleModal)
                    {
                        selectedNation = findPers.Nation;
                        selectedSocial = findPers.SocialOrigin;
                    }
                }

                private void OnHideModalStateModalClick() => visibleModalState = false;

                private void OnShowModalStateModalClick() => visibleModalState = true;

                private void OnChangeStateTempleClick()
                {
                    MeasuresState state = new()
                    {
                        Id = Guid.NewGuid().ToString()
                    };

                    state.Verdict = selectedVerdict;
                    state.YearArrest = yearArrest.SetDateTime();
                    state.YearSentence = yearSentence.SetDateTime();
                    state.Rehabilitaion = rehab;
                    state.YearRehabilitation = yearRehabilitation.SetDateTime();

                    state.FillEmptyFields();
                    findPers.State.Add(state);

                    visibleModalState = false;
                }

                private void OnChangeEducationTempleClick()
                {
                    Education education = new()
                    {
                        Id = Guid.NewGuid().ToString()
                    };

                    education.YearAdmission = yearAdmission.SetDateTime();
                    education.YearOfRease = yearOfRease.SetDateTime();
                    education.Institution = insition;

                    education.FillEmptyFields();
                    findPers.Education.Add(education);

                    visibleModalEductation = false;
                }

                private void OnHideModalEducationModalClick() => visibleModalEductation = false;
                private void OnShowModalEducationModalClick() => visibleModalEductation = true;

                private void OnChangeOriention()
                {
                    TempleOriention orientation = new()
                    {
                        Id = Guid.NewGuid().ToString()
                    };

                    orientation.Oriention = this.oriention;
                    orientation.YearFall = yearFall.SetDateTime();
                    orientation.YearRefund = yearRefund.SetDateTime();

                    orientation.FillEmptyFields();
                    findPers.Oriention.Add(orientation);
                    visibleModalOriention = false;
                }

                private void OnChangeSunClick()
                {
                    Sun sun = new()
                    {
                        Id = Guid.NewGuid().ToString()
                    };

                    sun.SunName = selectedSunName;
                    sun.YearDefrock = yearDefrock.SetDateTime();
                    sun.YearOrdinations = yearOrdinations.SetDateTime();

                    sun.FillEmptyFields();
                    findPers.Sun.Add(sun);
                    visibleModalSun = false;
                }

                private void OnChangeAward()
                {
                    Award award = new()
                    {
                        Id = Guid.NewGuid().ToString()
                    };

                    award.Name = selectedAward;
                    award.YearAward = yearAward.SetDateTime();

                    award.FillEmptyFields();
                    findPers.Award.Add(award);
                    visibleModalAward = false;
                }
            }
        </div>
    </DialogContent>
</MudDialog>

@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private bool blockSwitch = false;
    private string searchString1 = "";
    private Parsonalion selectedItem = null;
    private Parsonalion findPers;
    private HashSet<Parsonalion> selectedItems = new();
    private Parsonalion elementBeforeEdit;
    private HashSet<Parsonalion> selectedItems1 = new HashSet<Parsonalion>();
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;

    private IEnumerable<Parsonalion> Elements = new List<Parsonalion>();

    protected override async Task OnInitializedAsync()
    {
        Elements = context.Parsonalions
            .Include(t => t.State)
            .Include(t => t.Oriention)
            .Include(t => t.Award)
            .Include(t => t.Education)
            .Include(t => t.Sun);
    }

    private bool FilterFunc1(Parsonalion element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Parsonalion element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Name} {element.LastName} {element.Otch}".Contains(searchString))
            return true;
        return false;
    }

    private void ItemHasBeenCommitted(object? parishioners)
    {
        var element = parishioners as Parsonalion;

        var item = context.Parsonalions.FirstOrDefault(x => x.Id == element.Id);

        if (item != null)
        {
            item.Name = element.Name;
            item.LastName = element.LastName;
            item.Otch = element.Otch;
            item.MonaxName = element.MonaxName;
            item.Born = element.Born;
            item.Death = element.Death;
            item.Nation = element.Nation;
            // item.Education.YearAdmission = element.Education.YearAdmission;
            // item.Education.YearOfRease = element.Education.YearOfRease;
            item.LVLEducation = element.LVLEducation;
            // item.Award.Name = element.Award.Name;
            // item.Award.YearAward = element.Award.YearAward;
            item.Source = element.Source;
            // item.State.Verdict = element.State.Verdict;
            // item.State.YearArrest = element.State.YearArrest;
            // item.State.YearRehabilitation = element.State.YearRehabilitation;
            // item.State.YearSentence = element.State.YearSentence;
            // item.Sun.SunName = element.Sun.SunName;
            // item.Sun.YearDefrock = element.Sun.YearDefrock;
            // item.Sun.YearOrdinations = element.Sun.YearOrdinations;
            item.SocialOrigin = element.SocialOrigin;
            item.PlaceBirths = element.PlaceBirths;
            item.PlaceOfDeath = element.PlaceOfDeath;
            item.Note = element.Note;

            context.Parsonalions.Update(item);
            context.SaveChanges();

            visibleModal = false;
        }
    }

    private void BackupItem(object element)
    {

    }

    private void ResetItemToOriginalValues(object element)
    {

    }
    
    private MudTable<Parsonalion> mudTable;
    private bool visibleModal = false;

    private void RowClickEvent(TableRowClickEventArgs<Parsonalion> obj)
    {
        if (selectedItem != null)
        {
            var findItem = context.Parsonalions
                .Include(x => x.Oriention) 
                .Include(x => x.Award) 
                .Include(x => x.Sun)
                .Include(x => x.State)
                .Include(x => x.Education)
                .FirstOrDefault(x => x.Id == selectedItem.Id);

            if (findItem != null)
            {
                findPers = findItem; 
                visibleModal = true;
            }
        }  
    }
}