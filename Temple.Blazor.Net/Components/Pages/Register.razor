@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Temple.Net.Data
@using Temple.Net.Models
@using Temple.Net.Service
@inject UserDbContext _context
@inject UserService _userService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@page "/reg"

<style>
    footer {
        position: absolute;
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-lg-10 col-xl-9 mx-auto">
            <div class="card flex-row my-5 border-0 shadow rounded-3 overflow-hidden">
                <div class="card-body p-4 p-sm-5">
                    <h5 class="card-title text-center mb-5 fw-light fs-5">Регистрация</h5>
                    <MudTextField @bind-Value="model.Email" Label="Почта" Validation="@(new EmailAddressAttribute() { ErrorMessage = "Неверный формат электронной почты" })"/>
                        
                    <MudTextField @bind-Value="model.Password" Label="Пароль" InputType="InputType.Password" @ref="pwField1"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true" RequiredError="Пароль обязателен"/>
                        
                    <MudTextField @bind-Value="validPassword" Label="Подверждение пароля" InputType="InputType.Password"
                                  Required="true" RequiredError="Пароль обязателен" Validation="@(new Func<string, string>(PasswordMatch))"/>

                    <div class="d-grid mb-2" style="text-align: center; margin-top: 10px;">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Submit">Зарегистрироваться</MudButton>
                    </div>

                    <a class="d-block text-center mt-2 small" href="/login">Имеете уже у нас аккаунт?Нажмите что бы войти</a>
                </div>
            </div>
        </div>
    </div>
    <div>
        <p>@Message</p>
    </div>
</div>


@code {
    private AuthViewModel model = new();

    private string validPassword { get; set; }

    private string Message { get; set; }

    public async Task Submit()
    {
        if (model.Email == "admin@123" && model.Password == "admin")
        {
            User adminUser = new()
            {
                Id = Guid.NewGuid().ToString("N"),
                Email = model.Email,
                Role = "admin",
                PasswordHash = await _userService.CreatePasswordHashAsync(model.Password),
            };

            await _context.Users.AddAsync(adminUser);
            await _context.SaveChangesAsync();
            
            NavigationManager.NavigateTo($"Auth/singinAdmin?email={model.Email}", true);
        }

        var user = _context.Users.FirstOrDefault(x => x.Email == model.Email);

        string password = await _userService.CreatePasswordHashAsync(model.Password);
        string validPassword = await _userService.CreatePasswordHashAsync(model.Password);
        
        if (user == null && password == validPassword)
        {
            User newUser = new()
            {
                Id = Guid.NewGuid().ToString("N"),
                Email = model.Email,
                Role = "edit",
                PasswordHash = await _userService.CreatePasswordHashAsync(model.Password),
            };

            _context.Users.Add(newUser);
            _context.SaveChanges();

            NavigationManager.NavigateTo($"auth/singin?email={model.Email}&role={newUser.Role}", true);
        }
        else
        {
            Message = "Пользователь с такой почтой уже зарегистрирован";
        }
    }
    
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Пароль обязателен";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Пароль должен содержать не менее 8 символов";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Пароль должен содержать хотя бы одну заглавную букву";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Пароль должен содержать хотя бы одну строчную букву";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Пароль должен содержать хотя бы одну цифру";
    }
    
    private MudTextField<string> pwField1;

    private string PasswordMatch(string? arg)
    {
        if (pwField1?.Value != arg)
            return "Пароли не совпадают";
        return "";
    }
}