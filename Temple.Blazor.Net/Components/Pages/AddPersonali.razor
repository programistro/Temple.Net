@using OpenStreetMapForBlazor
@using Temple.Net.Models
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@using Temple.Net.Service
@inject AppDbContext _context
@inject IWebHostEnvironment Environment
@inject ValidationService ValidationService 
@inject NavigationManager NavigationManager


<MudDialogProvider @rendermode="InteractiveServer" MaxWidth="MaxWidth.ExtraExtraLarge"
                   Position="DialogPosition.Center"/>

<MudContainer MaxWidth="MaxWidth.Large" Style="width: 45%; margin-bottom: 20px;">
<MudCard>
<MudCardContent>
<h5 class="card-title text-center mb-3 fw-light fs-5">Добавить персоналии</h5>

<MudTextField T="string?" @bind-Value="_parsonalion.LastName" Label="Фамилия"/>

<MudTextField T="string?" @bind-Value="_parsonalion.Name" Label="Имя"/>

<MudTextField T="string?" @bind-Value="_parsonalion.Otch" Label="Отчество"/>

<MudTextField T="string?" @bind-Value="_parsonalion.MonaxName" Label="Монашеское имя"/>

<div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
        <MudTextField Label="Год рождения" @bind-Value="born" Validation="ValidationService.Validation" Style="width: 100%"/>
    </MudTooltip>
</div>

<div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
    <MudTextField T="string?" @bind-Value="_parsonalion.PlaceBirths" Label="Место рождение"/>
</div>

<div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
        <MudTextField Label="Год смерти" @bind-Value="death" Validation="ValidationService.Validation" Style="width: 100%"/>
    </MudTooltip>
</div>

<MudTextField T="string?" @bind-Value="_parsonalion.PlaceOfDeath" Label="Место смерти"/>


<MudAutocomplete T="string" Label="Национальность" @bind-Value="selectedNation" SearchFunc="@SearchNation"
                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                 CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />

<MudAutocomplete T="string" Label="Социальное положение" @bind-Value="selectedSocial" SearchFunc="@SearchSocial"
                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                 CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />

<br/>

<div>
    <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
        <h6 class="text-center mb-3 fw-light fs-5">Образование</h6>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="OnShowModalEducationModalClick"/>
    </div>

    <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
        @foreach (var item in _parsonalion?.Education)
        {
            <MudListItem Text="@item.Institution.ToString()"/>
        }
    </MudList>
</div>

<MudDialog @bind-visible="visibleModalEductation">
    <DialogContent>
        <div>
            <h6 class="text-center mb-3 fw-light fs-5">Образование</h6>
            <div>
                <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                        <MudTextField Label="Год поступления" @bind-Value="born" Validation="ValidationService.Validation" Style="width: 100%"/>
                    </MudTooltip>
                </div>

                <MudTextField @bind-Value="insition" Label="Учреждение образования"/>

                <div>
                    <MudSelect T="string" @bind-Value="@selectedLVLEductaion" Label="Уровень образования">
                        <MudSelectItem Value="@("Высшее")"/>
                        <MudSelectItem Value="@("Среднее")"/>
                        <MudSelectItem Value="@("Неполное-среднее")"/>
                        <MudSelectItem Value="@("Начальное")"/>
                        <MudSelectItem Value="@("Не известно")"/>
                    </MudSelect>
                </div>

                <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                    <MudTooltip Text="Пишите дату в формате ГГГГ">
                        <MudTextField Label="Год выпуска" @bind-Value="yearOfRease" Validation="ValidationService.ValidationOnlyYear" Style="width: 100%"/>
                    </MudTooltip>
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="OnHideModalEducationModalClick">Отмена</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeEducationTempleClick">Добавить</MudButton>
    </DialogActions>
</MudDialog>

<div>
    <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
        <h6 class="text-center mb-3 fw-light fs-5">Меры государственного воздействия</h6>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="@(() => visibleModalState = true)"/>
    </div>

    <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
        @foreach (var item in _parsonalion?.State)
        {
            <MudListItem Text="@item.Verdict.ToString()"/>
        }
    </MudList>
</div>

<div>
    <MudDialog @bind-visible="visibleModalState">
        <DialogContent>
            @* <h3 class="card-title text-center mb-3 fw-light fs-5">Меры государственного воздействия</h3> *@
            <div>
                <h4 class="card-title text-center mb-3 fw-light fs-5">Приговор</h4>

                <div>
                    <MudAutocomplete T="string" Label="Приговор" @bind-Value="selectedVerdict" SearchFunc="@SearchVerdicts"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText"
                                     CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
                </div>

                <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                        <MudTextField Label="Год ареста" @bind-Value="yearArrest" Validation="ValidationService.Validation" Style="width: 100%"/>
                    </MudTooltip>
                </div>

                <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                        <MudTextField Label="Год приговора" @bind-Value="yearSentence" Validation="ValidationService.Validation" Style="width: 100%"/>
                    </MudTooltip>
                </div>

                <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                        <MudTextField Label="Год реабелитации" @bind-Value="yearRehabilitation" Validation="ValidationService.Validation" Style="width: 100%"/>
                    </MudTooltip>
                </div>

                <MudTextField @bind-Value="rehab" Label="Реабилитирующий орган"/>
            </div>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" OnClick="@(() => visibleModalState = false)">Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeStateTempleClick">Добавить</MudButton>
        </DialogActions>
    </MudDialog>
</div>

<div>
    <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
        <h6 class="text-center mb-3 fw-light fs-5">Церковная ориентация</h6>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="@(() => visibleModalOriention = true)"/>
    </div>

    <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
        @foreach (var item in _parsonalion?.Oriention)
        {
            <MudListItem Text="@item.Oriention.ToString()"/>
        }
    </MudList>
</div>

<MudDialog @bind-visible="visibleModalOriention">
    <DialogContent>
        <div>
            <h3 class="card-title text-center mb-3 fw-light fs-5">Церковная ориентация</h3>

            <div>
                <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                        <MudTextField Label="Год отпадения" @bind-Value="yearFall" Validation="ValidationService.Validation" Style="width: 100%"/>
                    </MudTooltip>
                </div>

                <MudTextField @bind-Value="oriention" Label="Церковная ориентация"/>

                <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                        <MudTextField Label="Год возрата" @bind-Value="yearRefund" Validation="ValidationService.Validation" Style="width: 100%"/>
                    </MudTooltip>
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="@(() => visibleModalOriention = false)">Отмена</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeEducationTempleClick">Добавить</MudButton>
    </DialogActions>
</MudDialog>

<div>
    <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
        <h6 class="text-center mb-3 fw-light fs-5">Сан</h6>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="@(() => visibleModalSun = true)"/>
    </div>

    <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
        @foreach (var item in _parsonalion?.Sun)
        {
            <MudListItem Text="@item.SunName.ToString()"/>
        }
    </MudList>

    <MudDialog @bind-visible="visibleModalSun">
        <DialogContent>
            <div>
                <h3 class="card-title text-center mb-3 fw-light fs-5">Сан</h3>

                <div>
                    <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                        <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                            <MudTextField Label="Год рукоположения" @bind-Value="yearOrdinations" Validation="ValidationService.Validation" Style="width: 100%"/>
                        </MudTooltip>
                    </div>

                    <MudAutocomplete T="string" Label="Награда" @bind-Value="selectedSunName" SearchFunc="@SearchAward"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText"
                                     CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />

                    <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                        <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                            <MudTextField Label="Год снятия сана" @bind-Value=yearDefrock Validation="ValidationService.Validation" Style="width: 100%"/>
                        </MudTooltip>
                    </div>
                </div>
            </div>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Primary" OnClick="@(() => visibleModalSun = false)">Отмена</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeSunClick">Добавить</MudButton>
        </DialogActions>
    </MudDialog>
</div>

<div>
    <div class="containerOriention" style="justify-content: center; margin-top: 5px;">
        <h6 class="text-center mb-3 fw-light fs-5">Награды</h6>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Style="margin-bottom: 9px; margin-left: 7px;" OnClick="@(() => visibleModalAward = true)"/>
    </div>

    <MudList T="string" SelectionMode="SelectionMode.ToggleSelection">
        @foreach (var item in _parsonalion?.Award)
        {
            <MudListItem Text="@item.Name.ToString()"/>
        }
    </MudList>
</div>

<MudDialog @bind-visible="visibleModalAward">
    <DialogContent>
        <div>
            <h3 class="card-title text-center mb-3 fw-light fs-5">Награды</h3>

            <div>
                <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                    <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                        <MudTextField Label="Год награждения" @bind-Value="yearAward" Validation="ValidationService.Validation" Style="width: 100%"/>
                    </MudTooltip>
                </div>

                <MudAutocomplete T="string" Label="Награда" @bind-Value="selectedAward" SearchFunc="@SearchAward"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="@(() => visibleModalAward = false)">Отмена</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnChangeAward">Добавить</MudButton>
    </DialogActions>
</MudDialog>

<MudTextField @bind-Value="_parsonalion.Note" Label="Примечания"/>

<MudTextField @bind-Value="_parsonalion.Source" Label="Источник информации (в виде библиографической записи)"/>

<div class="input-file-row">
    <label class="input-file">
        <InputFile OnChange="LoadPhoto" accept="image/*"/>
        <span>Выберите фотографию</span>
    </label>
    <div class="input-file-list"></div>
</div>

<div class="input-file-row" style="margin-top: 10px;">
    <label class="input-file">
        <InputFile OnChange="LoadFile"/>
        <span>Выберите файл</span>
    </label>
    <div class="input-file-list"></div>
</div>

<div class="d-grid mb-2">
    <MudButton Style="margin-top: 20px;" Color="Color.Primary" Variant="Variant.Filled" OnClick="Sumbit">Добавить</MudButton>
</div>
</MudCardContent>
</MudCard>
</MudContainer>

<style>
    .containerOriention {
        display: flex;
        align-items: center; /* Выравнивание по вертикали */
    }
</style>

@code {
    public MapPosition position;
    public bool btnActive;

    private string selectedSunName;

    private string selectedAward;

    private string selectedNation;

    private string selectedSocial;

    private string selectedLVLEductaion;

    private string selectedVerdict;

    private string insition;

    private string rehab;

    private bool visibleModalState = false;
    
    private bool visibleModalEductation = false;

    private bool visibleModalOriention = false;

    private bool visibleModalSun = false;

    private bool visibleModalAward = false;

    private string oriention;

    private Parsonalion? _parsonalion = new()
    {
        Id = Guid.NewGuid().ToString("N"),
        Sun = new(),
        Award = new(),
        Education = new(),
        State = new(),
        Oriention = new()
    };

    private const long maxFileSize = 1024 * 500;

    private async Task LoadPhoto(InputFileChangeEventArgs e)
    {
        var trustedFileName = $"{Guid.NewGuid().ToString("N").Remove(6)}.png";

        var path = $@"wwwroot/photos/{trustedFileName}";

        await using FileStream fs = new(path, FileMode.Create);
        await e.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

        _parsonalion.Photo = path;
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var path = $@"wwwroot/files/{e.File.Name}";

        await using FileStream fs = new(path, FileMode.Create);
        await e.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

        _parsonalion.File = path;
    }

    #region

    private string[] awards =
    {
        "Набедренник", "Камилавка фиолетового цвета", "Наперсный крест", "Палица", "Крест с украшениями",
        "Служение Божественной литургии с отверстыми Царскими вратами до Херувимской песни",
        "Служение Божественной литургии с отверстыми Царскими Вратами до 'Отче наш'", "Митра",
        "Право ношения второго наперсного креста с украшениями", "Патриарший наперстый крест", "Двойной орарь",
    };

    private string[] sunNames =
    {
        "Архидиакон", "Архиепископ", "Диакон", "Епископ", "Игумен", "Иеродиакон", "Иеромонах", "Митрополит",
        "Монах", "Пономарь", "Послушник", "Причетник", "Протодиакон", "Протоиерей", "Протопресвитер", "Псаломщик",
        "Священник"
    };

    private string[] verdicts =
    {
        "10 лет тюремного заключения условно", "15 лет тюремного заключения с применением общественных работ", 
        "1 год исправительных трудовых работ", "1 год принудительных работ", "2 год принудительных работ", 
        "2 года строгой изоляции", "2 года тюрьмы с последующей ссылкой", "3 года строгой изоляции", 
        "3 месяца принудительных работ", "5 лет ИТЛ с высылкой семьи на Север", "5 лет строгой изоляции", 
        "5 лет строгой изоляции с конфискацией имущества и 3 года поражения в гражданских правах", 
        "6 месяцев исправительных работ", "6 месяцев принудительных работ", "3 месяца принудительных работ", 
        "8 лет принудительных работ со строгой изоляцией и конфискацией имущества", "Бессрочная административная высылка", 
        "Бессрочная ссылка", "Бессрочное заключение в концлагерь с применением принудительных работ", 
        "Бессрочное тюремное заключение с тягчайшими принудительными работами без права свидания с родными", 
        "Высшая мера наказания (расстрел)", "Высшая мера наказания (расстрел) с заменой на 10 лет заключения в ИТЛ", 
        "Высшая мера наказания (расстрел) с конфискацией имущества", "Высылка"
    };

    private string[] nations =
    {
        "Белорус", "Русский", "Украинец"
    };
    
    private string[] socials =
    {
        "Из крестьян", "Из мещан", "Из духовенства", "Из служащих", "Из дворян"
    };

    #endregion

    private bool coerceText;
    
    private bool coerceValue = true;
    
    private bool resetValueOnEmptyText;
    
    private async Task<IEnumerable<string>> SearchAward(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return awards;
        return awards.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task<IEnumerable<string>> SearchSunName(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return sunNames;
        return sunNames.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task<IEnumerable<string>> SearchVerdicts(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return verdicts;
        return verdicts.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task<IEnumerable<string>> SearchSocial(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return socials;
        return socials.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    } 
    
    private async Task<IEnumerable<string>> SearchNation(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return nations;
        return nations.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    #region ValuesForDate

    private string born;

    private string death;

    private string yearAdmission;

    private string yearOfRease;

    private string yearArrest;

    private string yearSentence;

    private string yearRehabilitation;

    private string yearFall;

    private string yearRefund;

    private string yearOrdinations;

    private string yearDefrock;

    private string yearAward;

    private string yearMention;
        
    #endregion
    
    private async Task Sumbit()
    {
        _parsonalion.Born = born.SetDateTime();
        _parsonalion.Death = death.SetDateTime();
        _parsonalion.YearMention = yearMention.SetDateTime();
        _parsonalion.FillEmptyFields();
        // _parsonalion.Education.FillEmptyFields();
        // _parsonalion.Oriention.FillEmptyFields();
        // _parsonalion.Award.FillEmptyFields();
        // _parsonalion.Sun.FillEmptyFields();
        // _parsonalion.State.FillEmptyFields();
        _context.Parsonalions.Add(_parsonalion);
        _context.SaveChanges();
        
        NavigationManager.NavigateTo("/home?show=true&obj=персоналии", true);
    }

    private void OnHideModalStateModalClick() => visibleModalState = false;
    
    private void OnShowModalStateModalClick() => visibleModalState = true;

    private void OnChangeStateTempleClick()
    {
        MeasuresState state = new()
        {
            Id = Guid.NewGuid().ToString()
        };

        state.Verdict = selectedVerdict;
        state.YearArrest = yearArrest.SetDateTime();
        state.YearSentence = yearSentence.SetDateTime();
        state.Rehabilitaion = rehab;
        state.YearRehabilitation = yearRehabilitation.SetDateTime();

        state.FillEmptyFields();
        _parsonalion.State.Add(state);

        visibleModalState = false;
    }
    
    private void OnChangeEducationTempleClick()
    {
        Education education = new()
        {
            Id = Guid.NewGuid().ToString()
        };

        education.YearAdmission = yearAdmission.SetDateTime();
        education.YearOfRease = yearOfRease.SetDateTime();
        education.Institution = insition;

        education.FillEmptyFields();
        _parsonalion.Education.Add(education);
        
        visibleModalEductation = false;
    }

    private void OnHideModalEducationModalClick() => visibleModalEductation = false;
    private void OnShowModalEducationModalClick() => visibleModalEductation = true;

    private void OnChangeOriention()
    {
        TempleOriention orientation = new()
        {
            Id = Guid.NewGuid().ToString()
        };

        orientation.Oriention = this.oriention;
        orientation.YearFall = yearFall.SetDateTime();
        orientation.YearRefund = yearRefund.SetDateTime();
        
        orientation.FillEmptyFields();
        _parsonalion.Oriention.Add(orientation);
        visibleModalOriention = false;
    }

    private void OnChangeSunClick()
    {
        Sun sun = new()
        {
            Id = Guid.NewGuid().ToString()
        };

        sun.SunName = selectedSunName;
        sun.YearDefrock = yearDefrock.SetDateTime();
        sun.YearOrdinations = yearOrdinations.SetDateTime();
        
        sun.FillEmptyFields();
        _parsonalion.Sun.Add(sun);
        visibleModalSun = false;
    }
    
    private void OnChangeAward()
    {
        Award award = new()
        {
            Id = Guid.NewGuid().ToString()
        };

        award.Name = selectedAward;
        award.YearAward = yearAward.SetDateTime();

        award.FillEmptyFields();
        _parsonalion.Award.Add(award);
        visibleModalAward = false;
    }
}