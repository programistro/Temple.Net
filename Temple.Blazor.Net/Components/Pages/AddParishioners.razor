@using OpenStreetMapForBlazor
@using Temple.Net.Models
@using Temple.Blazor.Net.Components.Layout
@inject IConfiguration config
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@using System.Security.Claims
@inject AppDbContext _context
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.VisualBasic
@using Newtonsoft.Json
@using Temple.Net.Data
@using Temple.Net.Service
@inject ValidationService ValidationService 
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Style="width: 45%; margin-bottom: 20px;">
    <MudCard>
        <MudCardContent>
            <h5 class="card-title text-center mb-3 fw-light fs-5">Добавить персоналии</h5>
            
            <MudAutocomplete T="string" Label="Название храма" @bind-Value="_parishioners.TempleName" SearchFunc="@SearchTemple"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
            
            <MudTextField Label="Фамилия" @bind-Value="_parishioners.LastName"/>

            <MudTextField Label="Имя" @bind-Value="_parishioners.Name"/>

            <MudTextField Label="Отчество" @bind-Value="_parishioners.Otch"/>

            <MudTextField Label="Возраст" @bind-Value="_parishioners.Age" T="int?"/>

            <MudSelect Tvalue="int" @bind-Value="@selectedGender" class="form-control js-example-basic-single">
                <MudSelectItem Value="1">Мужской</MudSelectItem>
                <MudSelectItem Value="2">Женский</MudSelectItem>
                <MudSelectItem Value="3">Не указано</MudSelectItem>
            </MudSelect>

            <MudTextField Label="Адрес" @bind-Value="_parishioners.Adress"/>

            <div>
                <MudAutocomplete T="string" Label="Общественное и служебное положение c 1914" @bind-Value="selectedSocialStatus" SearchFunc="@SearchSocial"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
            </div>

            <div>
                <MudSelect T="int" @bind-Value="@selectedEstate" Label="Принадлежность к сословию до революции">
                    <MudSelectItem Value="1">Крестьянство</MudSelectItem>
                    <MudSelectItem Value="2">Дворянство</MudSelectItem>
                    <MudSelectItem Value="3">Духовное</MudSelectItem>
                    <MudSelectItem Value="4">Не указано</MudSelectItem>
                </MudSelect>
            </div>

            <div>
                <MudSelect T="int" @bind-Value="@selectedSocial" Label="Имущественное положение">
                    <MudSelectItem Value="1">Бедняк</MudSelectItem>
                    <MudSelectItem Value="2">Средняк</MudSelectItem>
                    <MudSelectItem Value="3">Домовладелец</MudSelectItem>
                    <MudSelectItem Value="4">Без имущества</MudSelectItem>
                    <MudSelectItem Value="5">Не указано</MudSelectItem>
                </MudSelect>
            </div>

            <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                @* <MudDatePicker T="DateTime?" DateFormat="yyy" Label="Время присоединения к религиозному культу" @bind-Date="_parishioners.DateJoinRelligios"/> *@
                @* *@
                @* <MudTooltip Text="Можете не вписывать значение если не известно"> *@
                @*     <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" aria-label="Вопрос" Size="Size.Small"/> *@
                @* </MudTooltip> *@

                <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                    <MudTextField Label="Время присоединения к религиозному культу" @bind-Value="dateJoinRelligios" Validation="ValidationService.Validation" Style="width: 100%"/>
                </MudTooltip>
            </div>

            <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                @* <MudDatePicker T="DateTime?" DateFormat="yyy" Label="Год упоменания" @bind-Date="_parishioners.YearMention"/> *@
                @* *@
                <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                    <MudTextField Label="Год упоменания" @bind-Value="yearMention" Validation="ValidationService.Validation" Style="width: 100%"/>
                </MudTooltip>
            </div>

            <div style="margin-top: 10px; margin-bottom: 10px; display: flex; align-items: center; text-align: center; justify-content: space-between;">
                @* <MudDatePicker T="DateTime?" DateFormat="yyy" Label="Год возрата" @bind-Date="_parishioners.YearRestart"/> *@
                @* *@
                @* <MudTooltip Text="Можете не вписывать значение если не известно"> *@
                @*     <MudIconButton Icon="@Icons.Material.Filled.QuestionMark" aria-label="Вопрос" Size="Size.Small"/> *@
                @* </MudTooltip> *@
                <MudTooltip Text="Пишите дату в формате ДД. ММ.ГГГГ; ММ.ГГГГ, ГГГГ">
                    <MudTextField Label="Год возрата" @bind-Value="yearRestart" Validation="ValidationService.Validation" Style="width: 100%"/>
                </MudTooltip>
            </div>

            <MudTextField Label="Примичания" @bind-Value="_parishioners.Note"/>

            <MudTextField Label="Источники" @bind-Value="_parishioners.Source"/>

            <div style="margin-top: 10px;">
                <div class="input-file-row">
                    <label class="input-file">
                        <InputFile OnChange="LoadPhoto" accept="image/*"/>
                        <span>Выберите фотографию</span>
                    </label>
                    <div class="input-file-list"></div>
                </div>

                <div class="input-file-row" style="margin-top: 10px;">
                    <label class="input-file">
                        <InputFile OnChange="LoadFile"/>
                        <span>Выберите файл</span>
                    </label>
                    <div class="input-file-list"></div>
                </div>
            </div>

            <div class="d-grid mb-2">
                <MudButton Style="margin-top: 20px;" Color="Color.Primary" Variant="Variant.Filled" OnClick="Sumbit">Добавить</MudButton>
            </div>
        </MudCardContent>
    </MudCard>
</MudContainer>


@code {
    private int selectedItem = 1;

    private string selectedSocialStatus;

    private int selectedGender = 1;

    private int selectedEstate = 1;
    

    private Parishioners? _parishioners = new()
    {
        Id = Guid.NewGuid().ToString("N"),
    };

    private IQueryable<string> _temples;
    
    protected override void OnInitialized()
    {
        _temples = _context.Temples
            .Where(x => x.Name != "Пусто")
            .Select(x => x.Name);
    }

    private long maxFileSize = 1024 * 500;

    private int selectedSocial = 1;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var path = $@"wwwroot/files/{e.File.Name}";

        await using FileStream fs = new(path, FileMode.Create);
        await e.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

        _parishioners.File = path;
    }

    private async Task LoadPhoto(InputFileChangeEventArgs e)
    {
        var path = $@"wwwroot/photos/{e.File.Name}";

        await using FileStream fs = new(path, FileMode.Create);
        await e.File.OpenReadStream(maxFileSize).CopyToAsync(fs);

        _parishioners.Photo = path;
    }
    
    private bool coerceText;
    
    private bool coerceValue = true;
    
    private bool resetValueOnEmptyText;

    private string[] socialsStatus =
    {
        "Землепащец", "Домохозяйство", "Священник", "Слесарь", "Плотник"
    };
    
    private async Task<IEnumerable<string>> SearchSocial(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return socialsStatus;
        return socialsStatus.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private async Task<IEnumerable<string>> SearchTemple(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return _temples;
        return _temples.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    #region ValuesForDate

    private string yearRestart;

    private string yearMention;

    private string dateJoinRelligios;
    
    #endregion
    
    private async Task Sumbit()
    {
        switch (selectedSocial)
        {
            case 1:
                _parishioners.PropertyStatus = "Бедняк";
                _parishioners.Social = "Бедняк";
                break;
            case 2:
                _parishioners.PropertyStatus = "Средняк";
                _parishioners.Social = "Средняк";
                break;
            case 3:
                _parishioners.PropertyStatus = "Домовладелец";
                _parishioners.Social = "Домовладелец";
                break;
            case 4:
                _parishioners.PropertyStatus = "Без имущества";
                _parishioners.Social = "Без имущества";
                break;
        }

        switch (selectedGender)
        {
            case 1:
                _parishioners.Gender = "Мужской";
                break;
            case 2:
                _parishioners.Gender = "Женский";
                break;
            case 3:
                _parishioners.Gender = "Не указанно";
                break;
        }

        switch (selectedEstate)
        {
            case 1:
                _parishioners.EstateBeforeRevolution = "Крестьянство";
                break;
            case 2:
                _parishioners.EstateBeforeRevolution = "Дворянство";
                break;
            case 3:
                _parishioners.EstateBeforeRevolution = "Духовное";
                break;
            case 4:
                _parishioners.EstateBeforeRevolution = "Не указано";
                break;
        }

        _parishioners.YearRestart = yearRestart.SetDateTime();
        _parishioners.YearMention = yearMention.SetDateTime();
        _parishioners.DateJoinRelligios = dateJoinRelligios.SetDateTime();
        
        _parishioners.FillEmptyFields();
        
        _context.Parishioners.Add(_parishioners);
        _context.SaveChanges();
        NavigationManager.NavigateTo("/home?show=true&obj=прихожане", true);
    }
}