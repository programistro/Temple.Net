@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using OpenStreetMapForBlazor
@using Temple.Net.Models
@inject IConfiguration config
@inject IJSRuntime JSRuntime
@inject AppDbContext _context
@using Newtonsoft.Json
@using Temple.Blazor.Net.Components.Layout
@using Temple.Net.Service
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudPopoverProvider @rendermode="InteractiveServer"/>
<MudSnackbarProvider @rendermode="InteractiveServer"/>

<MudContainer MaxWidth="MaxWidth.Large" Style="width: 45%; margin-bottom: 20px;">
    <MudCard>
        <MudCardContent>
            <h5 class="card-title text-center mb-3 fw-light fs-5">Добавить храм</h5>
            <div>
                <MudTextField @bind-Value="_temple.Name" Label="Название"/>
            </div>

            <div>
                <MudAutocomplete T="string" Label="Тип храма" @bind-Value="selectedType" SearchFunc="@SearchType"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
            </div>

            <div style="margin-top: 10px; margin-bottom: 10px;">
                <MudDatePicker TValue="DateTime?" DateFormat="dd.MM.yyyy"
                               Placeholder="Год основания" @bind-Date="_temple.DateStart" Label="Год основания"/>
            </div>

            <div>
                <div>

                    <div style="margin-top: 10px; margin-bottom: 10px;">
                        <MudDatePicker TValue="DateTime?" DateFormat="dd.MM.yyyy"
                                       Label="Год закрытия" @bind-Date="_temple.DateEnd"/>
                    </div>

                    <div style="margin-top: 10px; margin-bottom: 10px;">
                        <MudDatePicker TValue="DateTime?" DateFormat="dd.MM.yyyy" Label="Год приспособления"
                                       @bind-Date="_temple.YearAdaptation"/>
                    </div>

                    <MudAutocomplete T="string" Label="Назначение после закрытия" @bind-Value="selectedAfterClosing" SearchFunc="@SearchAfterClosing"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText"
                                     CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
                    
                </div>
            </div>

            <div style="margin-top: 10px; margin-bottom: 10px;">
                <MudDatePicker TValue="DateTime?" DateFormat="dd.MM.yyyy" Label="Год уничтожения" @bind-Date="_temple.YearDestruction" />
            </div>

            <div>
                <h3 class="card-title text-center mb-3 fw-light fs-5">Церковная ориентация</h3>

                <div>
                    <div style="margin-top: 10px; margin-bottom: 10px;">
                        <MudDatePicker TValue="DateTime?" DateFormat="dd.MM.yyyy" Label="Год отпадения" @bind-Date="_temple.Oriention.YearFall" />
                    </div>

                    <MudAutocomplete T="string" Label="Церковная ориентация" @bind-Value="selectedOriention" SearchFunc="@SearchOriention"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText"
                                     CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />

                    <div style="margin-top: 10px; margin-bottom: 10px;">
                        <MudDatePicker DateFormat="dd.MM.yyyy" Label="Год возрата" @bind-Date="_temple.Oriention.YearRefund"/>
                    </div>
                </div>
            </div>

            <div>
                <h3 class="card-title text-center mb-3 fw-light fs-5">Количество прихожан</h3>

                <div>
                    <div style="margin-top: 10px; margin-bottom: 10px;">
                        <MudDatePicker DateFormat="dd.MM.yyyy" Label="Год" @bind-Date="_temple.ParshYear"/>
                    </div>

                    <MudTextField T="int?" @bind-value="_temple.Quantity" Label="Количество"/>
                </div>
            </div>

            <div>
                <h3 class="card-title text-center mb-3 fw-light fs-5">Епархии</h3>
                
                <MudAutocomplete T="string" Label="Епархии" @bind-Value="selectedDiocese" SearchFunc="@SearcDiocese"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" AdornmentColor="Color.Primary" />
            </div>

            <h3 class="card-title text-center mb-3 fw-light fs-5">Губернии и уезды</h3>

            <MudAutocomplete T="string" Label="Губернии" @bind-Value="selectedProvince" SearchFunc="@SearchProvince"
                             ResetValueOnEmptyText="@resetValueOnEmptyText"
                             CoerceText="@coerceText" CoerceValue="@coerceValue" />
            
            <MudAutocomplete T="string" Label="Уезды" @bind-Value="selectedCounties" SearchFunc="@SearchProvince"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" />

            <h3 class="card-title text-center mb-3 fw-light fs-5">Округа и районы округов (1924-1930)</h3>

            <div>
                <MudAutocomplete T="string" Label="Округа" @bind-Value="selectedOcrug" SearchFunc="@SearchOcrug"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" />
            </div>

            <div>
                <MudAutocomplete T="string" Label="Район" @bind-Value="selectedDistrict" SearchFunc="@SearchDistcirt"
                                 ResetValueOnEmptyText="@resetValueOnEmptyText"
                                 CoerceText="@coerceText" CoerceValue="@coerceValue" />
            </div>

            <div>
                <MudTextField @bind-Value="_temple.TypeLocality" Label="Тип населеного пункта"/>
            </div>

            <div>
                <MudTextField @bind-Value="_temple.Locality" Label="Населеный пункт"/>
            </div>
            
            <div>
                <MudTextField @bind-Value="_temple.RayonRegion" Label="Район области"/>
            </div>

            <div>
                <MudTextField @bind-Value="_temple.Region" Label="Регион"/>
            </div>

            <div>
                <MudTextField @bind-Value="_temple.RayonDistrict" Label="Район округа"/>
            </div>

            <div>
                <div style="height: 500px; margin-top: 20px;">
                    <OSMap Click="@MapClickEvent" CenterMap="@defPosition" />
                </div>
            </div>

            <div class="d-grid mb-2">
                <MudButton Style="margin-top: 20px;" Color="Color.Primary" Variant="Variant.Filled" OnClick="Sumbit">Добавить</MudButton>
            </div>
        </MudCardContent>
    </MudCard>
</MudContainer>
 
@code {
    public MapPosition position;
    public bool btnActive;

    MapPosition? defPosition;

    private string selectedType;

    private string selectedOriention;

    private string selectedDiocese;

    private string selectedDistrict;

    private string selectedProvince;

    private string selectedAfterClosing;

    private string selectedOcrug;

    private string selectedCounties;
    
    private Temple? _temple = new()
    {
        AppointmentsAfterEnd = new()
        {
            Id = Guid.NewGuid().ToString("N")
        },
        Oriention = new()
        {
            Id = Guid.NewGuid().ToString("N")
        },
        Id = Guid.NewGuid().ToString("N")
    };

    protected override void OnInitialized()
    {
        defPosition = new MapPosition() { Lat = config.GetValue<double>("Main:DefLat"), Lng = config.GetValue<double>("Main:DefLng") };
    }

    public void MapClickEvent(MapClickEventArgs args)
    {
        //events.Add(DateTime.Now, $"Map clicked at Lat: {args.Position.Lat}, Lng: {args.Position.Lng}");

        if (args != null) position = args.Position;

        //btnActive = !(position.Lng == defPosition.Lng && position.Lat == defPosition.Lat);
        //actualJson = JsonConvert.SerializeObject(args);

        //StateHasChanged();
    }

    private string[] types =
    {
        "Кафедральный", "Кладбищенский", "Приходской"
    };

    private string[] afterClosing =
    {
        "Зернохранилище", "Клуб", "Склад"
    };

    private string[] oriention =
    {
        "Автокафельная", "Обновличенская", "Тихоновская"
    };

    /// <summary>
    /// Автокафельная
    /// </summary>
    private string[] dioceseAvto =
    {
        "Автокафельная"
    };

    private string[] dioceseObnov =
    {
        "Велижско-Высочанская", "Витебская", "Гомельская", "Минская", "Могилевская", "Мозырская", "Мстиславская",
        "Оршанская", "Полоцкая", "Слуцкая", "Чаусская"
    };

    private string[] dioceseTixo =
    {
        "Гомельская", "Могилевская и Мстиславская", "Минская и Туровская", "Минская", "Минская и Белорусская",
        "Полоцкая и Витебская"
    };

    private string[] countiesVit =
    {
        "Велижский", "Витебский", "Городоккский", "Дриссенский", "Лепельский", "Невельский", "Полоцкий", "Себежский",
        "Суражский"
    };

    private string[] countiesGom =
    {
        "Гомельская", "Быховский",
        "Гомельский", "Могилевский", "Рогачевский", "Чаусский", "Чериковский", "Горецкий", "Климовический", "Оршанской"
    };

    private string[] countiesMin =
    {
        "Бобруйский", "Борисовский", "Игуменский", "Минский",
        "Мозырский", "Речицкий", "Слуцкий"
    };

    private string[] countiesMog =
    {
        "Быховский", "Гомельский", "Горецкий", "Климовичский", "Могилевский", "Мстиславский", "Оршанский", "Рогачевский", "Сенненский",
        "Чаусский", "Чериковский"  
    };

    ///<summary>
    /// Уезды
    /// </summary>
    private string[] counties =
    {
        "Витебская", "Гомельская", "Минская", "Могилевская", "Смоленская"
    };

    public string[] ocrugs =
    {
        "Бобруйский (1924-1930)", "Борисовский (1924-1927)", "Витебский (1924-1930)", "Калининский (1924-1927)",
        "Могилевский (1924-1930)", "Мозырский (1924-1930)", "Минский (1924-1930)", "Оршанский (1924-1930)", "Полоцкий (1924-1930)",
        "Слуцкий (1924-1927)", "Гомельский (1926-1930)", "Речицкий (1926-1927)"
    };

    private string[] ocrugBobrFirst =
    {
        "Бобруйский", "Бобруйский 1-й", "Бобруйский 2-й", "Буда-Кошелевский", "Городецкий", "Глусский", "Жлобинский",
        "Кличевский", "Краснослободский", "Любанский", "Осиповичский", "Паричский", "Рогачевский", "Свислочский", "Слуцкий",
        "Старобинский", "Стародорожский", "Стрешинский"
    };

    private string[] ocrugBobrSecond =
    {
        "Бегомльский", "Березинский", "Борисовский", "Зембинский", "Крупский",
        "Лепельский", "Плещеницкий", "Холопеничский", "Черейский"
    };

    private string[] ocrugVit =
    {
        "Бешенковичский", "Витебский", "Высочанский", "Городокский",
        "Езерищенский", "Лиозненский", "Кузнецовский", "Межанский", "Сенненский", "Сиротинский", "Суражский", "Чашникский"
    };

    private string[] ocrugKalin =
    {
        "Белынковичский", "Климовичский", "Кастюковичский", "Краснопольский", "Кричевский", "Милославичский", "Мстиславский",
        "Расненский", "Хотимский", "Чериковский"
    };

    private string[] ocrugMog =
    {
        "Белыничский", "Березинский", "Борисовский", "Журовичский", "Кастюковичский",
        "Климовичский", "Кормянский", "Краснопольский", "Кричевский", "Луполовский", "Милославичский", "Могилевский", "Пропойский",
        "Хотимский", "Чаусский", "Чериковский", "Чечевичский", "Шкловский"
    };

    private string[] ocrugMoz =
    {
        "Мозырский (1924-1930)", "Житковичский", "Калинковичский", "Каролинский",
        "Копаткевичский", "Лельчицкий", "Мозырский", "Наровлянский", "Озаричский", "Петриковский"
    };

    /// <summary>
    /// Минский
    /// </summary>
    private string[] ocrugMin =
    {
        "Бегомльский", "Березинский", "Борисовский", "Гресский",
        "Койдановский", "Зембинский", "Койдановский", "Копыльский", "Острошицко-Городокский", "Плещеницкий", "Пуховичский",
        "Самохваловичский", "Смиловичский", "Смолевичский", "Узденский", "Червенский", "Холопеничский", "Шацкий"
    };

    ///<summary>
    /// Оршанский
    /// </summary>
    private string[] ocrugOrsh =
    {
        "Богушевский",
        "Горецкий", "Дрибинский", "Дубровенский", "Копысский", "Кохановский", "Круглянский", "Лядненский", "Мстиславский",
        "Оршанский", "Расненский", "Толочинский"
    };

    ///<summary>>
    /// Полоцкий
    /// </summary>
    private string[] ocrugPoloc =
    {
        "Ветринский", "Волынецкий", "Борковичский", "Дретунский", "Краснопольский",
        "Дриссенский", "Освейский", "Полоцкий", "Россонский", "Улльский", "Ушачский"
    };

    ///<summary>>
    /// Слуцкий
    /// </summary>
    private string[] ocrugSlyc =
    {
        "Гресский", "Копыльский", "Краснослободский",
        "Любанский", "Слуцкий", "Стародорожский", "Старобинский"
    };

    ///<summary>>
    /// Гомельский
    /// </summary>
    private string[] ocrugGom =
    {
        "Брагинский", "Буда-Кошелевский", "Ветковский",
        "Гомельский", "Дятловичский", "Добрушский", "Комаринский", "Краснобудский",
        "Носовичский", "Светиловичский", "Уваровичский", "Чечерский",
        "Брагинский", "Комаринский", "Лоевский", "Речицкий", "Хойникский", "Тереховский", "Буда-Кошелевский"
    };

    ///<summary>
    ///  Речинский
    /// </summary>
    private string[] ocrugRech =
    {
        "Брагинский", "Василевичский", "Горвальский", "Комаринский", "Лоевский",
        "Речицкий", "Хойникский", "Холмечский", "Юровичский"
    };
    
    private bool coerceText;
    
    private bool coerceValue;
    
    private bool resetValueOnEmptyText;
    
    private async Task<IEnumerable<string>> SearchType(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return types;
        return types.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchAfterClosing(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return afterClosing;
        return afterClosing.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));   
    }

    private async Task<IEnumerable<string>> SearchOriention(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return oriention;
        return oriention.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearcDiocese(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        switch (selectedOriention)
        {
            case "Автокафельная":
                if (string.IsNullOrEmpty(value))
                    return dioceseAvto;
                return dioceseAvto.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Обновличенская":
                if (string.IsNullOrEmpty(value))
                    return dioceseObnov;
                return dioceseObnov.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Тихоновская":
                if (string.IsNullOrEmpty(value))
                    return dioceseAvto;
                return dioceseAvto.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
                default:
                if (string.IsNullOrEmpty(value))
                    return dioceseAvto;
                return dioceseAvto.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
        }
    }
    
    private async Task<IEnumerable<string>> SearchOcrug(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return ocrugs;
        return ocrugs.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchProvince(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        if (string.IsNullOrEmpty(value))
            return counties;
        return counties.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> SearchCounties(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        switch (selectedProvince)
        {
            case "Витебская":
                if (string.IsNullOrEmpty(value))
                    return countiesVit;
                return countiesVit.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Гомельская":
                if (string.IsNullOrEmpty(value))
                    return countiesGom;
                return countiesGom.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Минская":
                if (string.IsNullOrEmpty(value))
                    return countiesMin;
                return countiesMin.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Могилевская":
                if (string.IsNullOrEmpty(value))
                    return countiesMog;
                return countiesMog.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Смоленская":
                if (string.IsNullOrEmpty(value))
                    return ocrugGom.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                return ocrugGom.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
                default:
                if (string.IsNullOrEmpty(value))
                    return ocrugGom.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                return ocrugGom.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
        }
    }

    private async Task<IEnumerable<string>> SearchDistcirt(string value, CancellationToken token)
    {
        await Task.Delay(5, token);

        switch (selectedOcrug)
        {
            case "Бобруйский (1924-1930)":
                if (string.IsNullOrEmpty(value))
                    return ocrugBobrFirst;
                return ocrugGom.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Борисовский (1924-1927)":
                if (string.IsNullOrEmpty(value))
                    return ocrugBobrSecond;
                return ocrugBobrSecond.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;  
            case "Витебский (1924-1930)":
                if (string.IsNullOrEmpty(value))
                    return ocrugVit;
                return ocrugVit.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break; 
            case "Калининский (1924-1927)":
                if (string.IsNullOrEmpty(value))
                    return ocrugKalin;
                return ocrugKalin.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Могилевский (1924-1930)":
                if (string.IsNullOrEmpty(value))
                    return ocrugMog;
                return ocrugMog.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Мозырский (1924-1930)":
                if (string.IsNullOrEmpty(value))
                    return ocrugMoz;
                return ocrugMoz.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Минский (1924-1930)":
                if (string.IsNullOrEmpty(value))
                    return ocrugMin;
                return ocrugMin.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Оршанский (1924-1930)":
                if (string.IsNullOrEmpty(value))
                    return ocrugOrsh;
                return ocrugOrsh.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Полоцкий (1924-1930)":
                if (string.IsNullOrEmpty(value))
                    return ocrugPoloc;
                return ocrugPoloc.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Слуцкий (1924-1927)":
                if (string.IsNullOrEmpty(value))
                    return ocrugSlyc;
                return ocrugSlyc.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Гомельский (1926-1930)":
                if (string.IsNullOrEmpty(value))
                    return ocrugGom;
                return ocrugGom.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            case "Речицкий (1926-1927)":
                if (string.IsNullOrEmpty(value))
                    return ocrugRech;
                return ocrugRech.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
            default:
                if (string.IsNullOrEmpty(value))
                    return ocrugGom;
                return ocrugGom.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
                break;
        }
    }

    private async Task Sumbit()
    {
        string url = $"https://catalog.api.2gis.com/3.0/items/geocode?lon={defPosition.Lng}&lat={defPosition.Lat}&fields=items.point&key=2c437b2b-790f-4f22-9ec5-3889ea3e0bc4";

        using HttpClient client = new HttpClient();
        HttpResponseMessage response = await client.GetAsync(url.Replace(",", "."));

        if (response.IsSuccessStatusCode)
        {
            string content = await response.Content.ReadAsStringAsync();
            Console.WriteLine(content);

            var data = JsonConvert.DeserializeObject<dynamic>(content);

            // Получение списка элементов
            var items = data.result.items;

            // Цикл по всем элементам
            foreach (var item in items)
            {
                Console.WriteLine($"Full Name: {item.full_name}");
                Console.WriteLine($"Name: {item.name}");
                Console.WriteLine($"Subtype: {item.subtype}");
                Console.WriteLine();
                _temple.Province = item.full_name;

                break;
            }

            _temple.Type = selectedType;
            _temple.Province = selectedProvince;
            _temple.Counties = selectedCounties;
            _temple.District = selectedDistrict;
            _temple.Ocrug = selectedOcrug;
            _temple.AppointmentsAfterEnd.Appointmenrs = selectedAfterClosing;
            _temple.Oriention.Oriention = selectedOriention;
            _temple.OrientationDiocesse = selectedDiocese;

            _temple.AppointmentsAfterEnd.Id = Guid.NewGuid().ToString("N");
            _temple.Oriention.Id = Guid.NewGuid().ToString("N");
            _temple.Id = Guid.NewGuid().ToString("N");
            
            _temple.FillEmptyFields();
            _temple.AppointmentsAfterEnd.FillEmptyFields();
            _temple.Oriention.FillEmptyFields();
            
            _context.Temples.Add(_temple);
            _context.SaveChanges();
            
            NavigationManager.NavigateTo("/?show=true&obj=храм", true);
        }
    }
}