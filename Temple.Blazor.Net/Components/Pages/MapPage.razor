@inject IConfiguration config
@inject IJSRuntime JSRuntime
@page "/map"
@using Microsoft.EntityFrameworkCore
@inject AppDbContext _context
@rendermode InteractiveServer

<style>
    footer {
        position: absolute;
        display: none;
    }
    /** {*/
    /*    outline: 4px solid green !important;*/
    /*}*/
</style>

<MudPopoverProvider @rendermode="InteractiveServer"/>
<MudSnackbarProvider @rendermode="InteractiveServer"/>

<MudGrid Spacing="4" Justify="Justify.Center">
    <MudItem>
        <MudCard Style="width: 228px; margin-left: 50px;">
            <MudCardContent>
                <div>
                    <MudSelect T="string" Label="Церковная ориентация" @bind-Value="selectedOriention" SelectedValuesChanged="HandleOrientionFilterChange" 
                               Disabled="IsDisabledFirst">
                        @foreach (var uniqueOriention in _temples.Select(item => item.Oriention.Oriention).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                    
                    <MudSelect T="string" Label="Епархия" @bind-Value="selectedDiocese" SelectedValuesChanged="HandleOrientionFilterChange"
                               Disabled="IsDisabledFirst">
                        @foreach (var uniqueOriention in _temples.Select(item => item.OrientationDiocesse).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                    
                    @* <MudSelect T="string" Label="Благочиние" @bind-Value="selectedDiocese"> *@
                    @*     @foreach (var item in _temples) *@
                    @*     { *@
                    @*         if (item.OrientationDiocesse != "Пусто") *@
                    @*         { *@
                    @*             <MudSelectItem Value="@($"{item.OrientationDiocesse}")"/> *@
                    @*         } *@
                    @*     } *@
                    @* </MudSelect> *@
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard Style="width: 228px;">
            <MudCardContent>
                <div>
                    <MudSelect T="string" Label="Губерния" @bind-Value="selectedProvince" Disabled="IsDisabledSecond" 
                               SelectedValuesChanged="HandleProvinceFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.Province).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
    
                    <MudSelect T="string" Label="Уезд" @bind-Value="selectedCounties" Disabled="IsDisabledSecond" 
                               SelectedValuesChanged="HandleProvinceFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.Counties).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard Style="width: 228px;">
            <MudCardContent>
                <div>
                    <MudSelect T="string" Label="Округ" @bind-Value="selectedOcrug" Disabled="IsDisabledThird" SelectedValuesChanged="HandleOcrugFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.Ocrug).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>

                    <MudSelect T="string" Label="Район округа" @bind-Value="selectedRayonOcrug" Disabled="IsDisabledThird"
                               SelectedValuesChanged="HandleOcrugFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.RayonDistrict).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard Style="width: 228px;">
            <MudCardContent>
                <div>
                    <MudSelect T="string" Label="Район области" @bind-Value="selectedRayonRegion" Disabled="IsDisabledFourth"
                               SelectedValuesChanged="HandleRegionFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.SeparateRegion).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>

                    <MudSelect T="string" Label="Отб район" @bind-Value="selectedRegion" Disabled="IsDisabledFourth" SelectedValuesChanged="HandleRegionFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.Region).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard Style="width: 228px;">
            <MudCardContent>
                <div>
                    <MudSelect T="string" Label="Храм" @bind-Value="selectedTemple" Disabled="IsDisabledFifth" SelectedValuesChanged="HandlTempleFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.Name).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>

                    <MudSelect T="string" Label="Тип храма" @bind-Value="selectedTempleType" Disabled="IsDisabledFifth" SelectedValuesChanged="HandlTempleFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.Type).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                    
                    <MudSelect T="string" Label="Насленый пункт" @bind-Value="selectedLocality" Disabled="IsDisabledFifth" SelectedValuesChanged="HandlTempleFilterChange">
                        @foreach (var uniqueOriention in _temples.Select(item => item.Locality).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem>
        <MudCard Style="width: 228px;">
            <MudCardContent>
                <div>
                    <MudSelect T="string" Label="Фамилия" @bind-Value="selectedLastName" Disabled="IsDisabledSixth">
                        @foreach (var uniqueOriention in _parsonalions.Select(item => item.LastName).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>

                    <MudSelect T="string" Label="Имя" @bind-Value="selectedName" Disabled="IsDisabledSixth">
                        @foreach (var uniqueOriention in _parsonalions.Select(item => item.Name).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                    
                    <MudSelect T="string" Label="Отчество" @bind-Value="selectedOtch" Disabled="IsDisabledSixth">
                        @foreach (var uniqueOriention in _parsonalions.Select(item => item.Otch).Where(o => o != "Пусто").Distinct())
                        {
                            <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                    
                    <MudSelect T="string" Label="Монашеское имя" @bind-Value="selectedMonaxName" Disabled="IsDisabledSixth">
                        @foreach (var uniqueOriention in _parsonalions.Select(item => item.MonaxName).Where(o => o != "Пусто").Distinct())
                        {
                        <MudSelectItem Value="@uniqueOriention"/>
                        }
                    </MudSelect>
                </div>
            </MudCardContent>
        </MudCard>
        <MudItem Style="margin-top: 2px;">
            <MudLink OnClick="ResetValues">Сбросить</MudLink>
        </MudItem>
    </MudItem>
    <MudFlexBreak/>
    <MudItem Style="margin-bottom: 5px;">
        <MudPaper Height="575px" Width="192vh">
            <div id="map" style="height: 575px; width: 100%;"></div>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private string selectedSeach;

    private string selectedOriention;

    /// <summary>
    /// Губеиния
    /// </summary>
    private string selectedProvince;

    ///<summary>
    /// Уезды
    /// </summary>
    private string selectedCounties;
    
    /// <summary>
    /// Церковная ориентация
    /// </summary>
    private string selectedDiocese;

    private string selectedOcrug;
    
    private string selectedRayonOcrug;
    
    private string selectedRayonRegion;
    
    private string selectedRegion;
    
    private string selectedTemple;
    
    private string selectedTempleType;
    
    ///<summary>
    /// Населеный пункт
    /// </summary>
    private string selectedLocality;

    private string selectedName;
    
    private string selectedLastName;
    
    private string selectedOtch;
    
    private string selectedMonaxName;

    IEnumerable<Temple> _temples = new List<Temple>();
    
    IEnumerable<Parsonalion> _parsonalions = new List<Parsonalion>();
    
    IEnumerable<Parishioners> _parishioners = new List<Parishioners>();

    private bool IsDisabledFirst = false;
    
    private bool IsDisabledSecond = false;
    
    private bool IsDisabledThird = false;
    
    private bool IsDisabledFourth = false;
    
    private bool IsDisabledFifth = false;
    
    private bool IsDisabledSixth = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _temples = _context.Temples
                .Include(t => t.AppointmentsAfterEnd)
                .Include(t => t.Oriention);
            await JSRuntime.InvokeVoidAsync("initMap");
            await JSRuntime.InvokeVoidAsync("console.log", "Hello, world!");
            await JSRuntime.InvokeVoidAsync("disableClickHandler");
            foreach (var temple in _temples)
            {
                if (temple.Lng != 0 || temple.Lat != 0)
                {
                    await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                }
            }
        }
    }
    
    private async Task HandleOrientionFilterChange()
    {
        await JSRuntime.InvokeVoidAsync("clearAllMarkers");
        foreach (var temple in _temples)
        {
            if (temple.Lng != 0 || temple.Lat != 0)
            {
                if (!string.IsNullOrEmpty(selectedOriention) && !string.IsNullOrEmpty(selectedDiocese))
                {
                    if (temple.Oriention.Oriention == selectedOriention && temple.OrientationDiocesse == selectedDiocese)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedDiocese))
                {
                    if (temple.OrientationDiocesse == selectedDiocese)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedOriention))
                {
                    if (temple.Oriention.Oriention == selectedOriention)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
            }
        }

        IsDisabledSecond = true;
        IsDisabledThird = true;
        IsDisabledFourth = true;
        IsDisabledFifth = true;
        IsDisabledSixth = true;
    }
    
    private async Task HandleProvinceFilterChange()
    {
        await JSRuntime.InvokeVoidAsync("clearAllMarkers");

        foreach (var temple in _temples)
        {
            if (temple.Lng != 0 || temple.Lat != 0)
            {
                if (!string.IsNullOrEmpty(selectedCounties) && !string.IsNullOrEmpty(selectedProvince))
                {
                    if (temple.Counties == selectedCounties && temple.Province == selectedProvince)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedCounties))
                {
                    if (temple.Counties == selectedCounties)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedProvince))
                {
                    if (temple.Province == selectedProvince)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
            }
        }

        IsDisabledFirst = true;
        IsDisabledThird = true;
        IsDisabledFourth = true;
        IsDisabledFifth = true;
        IsDisabledSixth = true;
    }

    private async void ResetValues()
    {
        selectedDiocese = "";
        selectedCounties = "";
        selectedName = "";
        selectedLocality = "";
        selectedOriention = "";
        selectedOcrug = "";
        selectedOtch = "";
        selectedProvince = "";
        selectedRegion = "";
        selectedSeach = "";
        selectedTemple = "";
        selectedLastName = "";
        selectedRayonRegion = "";
        selectedRayonOcrug = "";
        selectedLocality = "";
        selectedName = "";
        selectedLastName = "";
        selectedOtch = "";
        selectedMonaxName = "";
        selectedTempleType = "";
        IsDisabledFirst = false;
        IsDisabledSecond = false;
        IsDisabledThird = false;
        IsDisabledFourth = false;
        IsDisabledFifth = false;
        IsDisabledSixth = false;
        
        if (_parsonalions.Count() == 0)
        {
            IsDisabledSixth = true;
        }
        
        foreach (var temple in _temples)
        {
            if (temple.Lng != 0 || temple.Lat != 0)
            {
                await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
            }
        }
    }

    private async Task HandleOcrugFilterChange()
    {     
        await JSRuntime.InvokeVoidAsync("clearAllMarkers");
        foreach (var temple in _temples)
        {
            if (temple.Lng != 0 || temple.Lat != 0)
            {
                if (!string.IsNullOrEmpty(selectedOcrug) && !string.IsNullOrEmpty(selectedRayonOcrug))
                {
                    if (temple.Ocrug == selectedOcrug && temple.RayonDistrict == selectedRayonOcrug)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedRayonOcrug))
                {
                    if (temple.RayonDistrict == selectedRayonOcrug)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedOcrug))
                {
                    if (temple.Ocrug == selectedOcrug)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
            }
        }

        IsDisabledSecond = true;
        IsDisabledFirst = true;
        IsDisabledFourth = true;
        IsDisabledFifth = true;
        IsDisabledSixth = true;
    }
    
    private async Task HandleRegionFilterChange()
    {     
        await JSRuntime.InvokeVoidAsync("clearAllMarkers");
        foreach (var temple in _temples)
        {
            if (temple.Lng != 0 || temple.Lat != 0)
            {
                if (!string.IsNullOrEmpty(selectedRayonRegion) && !string.IsNullOrEmpty(selectedRegion))
                {
                    if (temple.RayonRegion == selectedRayonRegion && temple.Region == selectedRegion)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedRayonRegion))
                {
                    if (temple.RayonRegion == selectedRayonRegion)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedRegion))
                {
                    if (temple.Region == selectedRegion)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
            }
        }

        IsDisabledSecond = true;
        IsDisabledFirst = true;
        IsDisabledThird = true;
        IsDisabledFifth = true;
        IsDisabledSixth = true;
    }
    
    private async Task HandlTempleFilterChange()
    {     
        await JSRuntime.InvokeVoidAsync("clearAllMarkers");
        foreach (var temple in _temples)
        {
            if (temple.Lng != 0 || temple.Lat != 0)
            {
                if (!string.IsNullOrEmpty(selectedTemple) && !string.IsNullOrEmpty(selectedTempleType)
                    && !string.IsNullOrEmpty(selectedLocality))
                {
                    if (temple.Name == selectedTemple && temple.Type == selectedTempleType && temple.Locality == selectedLocality)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                if (!string.IsNullOrEmpty(selectedTemple) && !string.IsNullOrEmpty(selectedLocality))
                {
                    if (temple.Name == selectedTemple && temple.Locality == selectedLocality)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                if (!string.IsNullOrEmpty(selectedLocality) && !string.IsNullOrEmpty(selectedTempleType))
                {
                    if (temple.Locality == temple.Locality && temple.Type == selectedTempleType)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedTemple))
                {
                    if (temple.Name == selectedTemple)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedTempleType))
                {
                    if (temple.Type == selectedTempleType)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
                else if (!string.IsNullOrEmpty(selectedLocality))
                {
                    if (temple.Locality == selectedLocality)
                    {
                        await JSRuntime.InvokeVoidAsync("addMarker", temple.Lat, temple.Lng, temple.Name);
                    }
                }
            }
        }

        IsDisabledSecond = true;
        IsDisabledFirst = true;
        IsDisabledThird = true;
        IsDisabledFourth = true;
        IsDisabledSixth = true;
    }
}